# Generated by Neurodocker version 0.4.2
# Timestamp: 2018-11-08 03:10:56 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/kaczmarj/neurodocker

Bootstrap: docker
From: neurodebian:stretch-non-free

%post
export ND_ENTRYPOINT="/neurodocker/startup.sh"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    apt-utils \
    bzip2 \
    ca-certificates \
    curl \
    locales \
    unzip
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG="en_US.UTF-8"
chmod 777 /opt && chmod a+s /opt
mkdir -p /neurodocker
if [ ! -f "$ND_ENTRYPOINT" ]; then
  echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"
  echo 'set -e' >> "$ND_ENTRYPOINT"
  echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";
fi
chmod -R 777 /neurodocker && chmod a+s /neurodocker

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    convert3d \
    ants \
    fsl \
    gcc \
    g++ \
    graphviz \
    tree \
    git-annex-standalone \
    vim \
    emacs-nox \
    nano \
    less \
    ncdu \
    tig \
    git-annex-remote-rclone \
    octave \
    netbase
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

sed -i '$isource /etc/fsl/fsl.sh' $ND_ENTRYPOINT

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bc \
    libncurses5 \
    libxext6 \
    libxmu6 \
    libxpm-dev \
    libxt6
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
echo "Downloading MATLAB Compiler Runtime ..."
curl -fsSL --retry 5 -o /tmp/mcr.zip https://ssd.mathworks.com/supportfiles/downloads/R2018b/deployment_files/R2018b/installers/glnxa64/MCR_R2018b_glnxa64_installer.zip
unzip -q /tmp/mcr.zip -d /tmp/mcrtmp
/tmp/mcrtmp/install -destinationFolder /opt/matlabmcr-2018b -mode silent -agreeToLicense yes
rm -rf /tmp/*
echo "Downloading standalone SPM ..."
curl -fsSL --retry 5 -o /tmp/spm12.zip http://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/dev/spm12_latest_Linux_R2018b.zip
unzip -q /tmp/spm12.zip -d /tmp
mkdir -p /opt/spm12-dev
mv /tmp/spm12/* /opt/spm12-dev/
chmod -R 777 /opt/spm12-dev
rm -rf /tmp/*
/opt/spm12-dev/run_spm12.sh /opt/matlabmcr-2018b/v95 quit
sed -i '$iexport SPMMCRCMD=\"/opt/spm12-dev/run_spm12.sh /opt/matlabmcr-2018b/v95 script\"' $ND_ENTRYPOINT

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    cmake \
    g++ \
    gcc \
    git \
    make \
    pigz \
    zlib1g-dev
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
git clone https://github.com/rordenlab/dcm2niix /tmp/dcm2niix
mkdir /tmp/dcm2niix/build
cd /tmp/dcm2niix/build
cmake  -DCMAKE_INSTALL_PREFIX:PATH=/opt/dcm2niix-latest ..
make 
make install
rm -rf /tmp/dcm2niix

echo "Downloading PETPVC ..."
mkdir -p /opt/petpvc-1.2.2
curl -fsSL --retry 5 https://github.com/UCL/PETPVC/releases/download/v1.2.2/PETPVC-1.2.2-Linux.tar.gz \
| tar -xz -C /opt/petpvc-1.2.2 --strip-components 1

useradd --no-user-group --create-home --shell /bin/bash neuro
su - neuro

export PATH="/opt/miniconda-latest/bin:$PATH"
echo "Downloading Miniconda installer ..."
conda_installer="/tmp/miniconda.sh"
curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash "$conda_installer" -b -p /opt/miniconda-latest
rm -f "$conda_installer"
conda update -yq -nbase conda
conda config --system --prepend channels conda-forge
conda config --system --set auto_update_conda false
conda config --system --set show_channel_urls true
sync && conda clean -tipsy && sync
conda create -y -q --name neuro
conda install -y -q --name neuro \
    python=3.6 \
    pytest \
    jupyter \
    jupyterlab \
    jupyter_contrib_nbextensions \
    traits \
    pandas \
    matplotlib \
    scikit-learn \
    scikit-image \
    seaborn \
    nbformat \
    nb_conda \
    XlsxWriter
sync && conda clean -tipsy && sync
bash -c "source activate neuro
  pip install --no-cache-dir  \
      https://github.com/nipy/nipype/tarball/master \
      nilearn \
      nipy \
      duecredit \
      nbval"
rm -rf ~/.cache/pip/*
sync
sed -i '$isource activate neuro' $ND_ENTRYPOINT


bash -c 'source activate neuro && jupyter nbextension enable exercise2/main && jupyter nbextension enable spellchecker/main'

su - root

mkdir /data && chmod 777 /data && chmod a+s /data

mkdir /output && chmod 777 /output && chmod a+s /output

su - neuro

su - root

rm -rf /opt/conda/pkgs/*

su - neuro

mkdir -p ~/.jupyter && echo c.NotebookApp.ip = \"0.0.0.0\" > ~/.jupyter/jupyter_notebook_config.py

cd /home/neuro

echo '{
\n  "pkg_manager": "apt",
\n  "instructions": [
\n    [
\n      "base",
\n      "neurodebian:stretch-non-free"
\n    ],
\n    [
\n      "_header",
\n      {
\n        "version": "generic",
\n        "method": "custom"
\n      }
\n    ],
\n    [
\n      "install",
\n      [
\n        "convert3d",
\n        "ants",
\n        "fsl",
\n        "gcc",
\n        "g++",
\n        "graphviz",
\n        "tree",
\n        "git-annex-standalone",
\n        "vim",
\n        "emacs-nox",
\n        "nano",
\n        "less",
\n        "ncdu",
\n        "tig",
\n        "git-annex-remote-rclone",
\n        "octave",
\n        "netbase"
\n      ]
\n    ],
\n    [
\n      "add_to_entrypoint",
\n      "source /etc/fsl/fsl.sh"
\n    ],
\n    [
\n      "spm12",
\n      {
\n        "version": "dev"
\n      }
\n    ],
\n    [
\n      "dcm2niix",
\n      {
\n        "version": "latest",
\n        "method": "source"
\n      }
\n    ],
\n    [
\n      "petpvc",
\n      {
\n        "version": "1.2.2",
\n        "method": "binaries"
\n      }
\n    ],
\n    [
\n      "user",
\n      "neuro"
\n    ],
\n    [
\n      "miniconda",
\n      {
\n        "conda_install": [
\n          "python=3.6",
\n          "pytest",
\n          "jupyter",
\n          "jupyterlab",
\n          "jupyter_contrib_nbextensions",
\n          "traits",
\n          "pandas",
\n          "matplotlib",
\n          "scikit-learn",
\n          "scikit-image",
\n          "seaborn",
\n          "nbformat",
\n          "nb_conda",
\n          "XlsxWriter"
\n        ],
\n        "pip_install": [
\n          "https://github.com/nipy/nipype/tarball/master",
\n          "nilearn",
\n          "nipy",
\n          "duecredit",
\n          "nbval"
\n        ],
\n        "create_env": "neuro",
\n        "activate": true
\n      }
\n    ],
\n    [
\n      "run_bash",
\n      "source activate neuro && jupyter nbextension enable exercise2/main && jupyter nbextension enable spellchecker/main"
\n    ],
\n    [
\n      "user",
\n      "root"
\n    ],
\n    [
\n      "run",
\n      "mkdir /data && chmod 777 /data && chmod a+s /data"
\n    ],
\n    [
\n      "run",
\n      "mkdir /output && chmod 777 /output && chmod a+s /output"
\n    ],
\n    [
\n      "user",
\n      "neuro"
\n    ],
\n    [
\n      "user",
\n      "root"
\n    ],
\n    [
\n      "run",
\n      "rm -rf /opt/conda/pkgs/*"
\n    ],
\n    [
\n      "user",
\n      "neuro"
\n    ],
\n    [
\n      "run",
\n      "mkdir -p ~/.jupyter && echo c.NotebookApp.ip = \\\"0.0.0.0\\\" > ~/.jupyter/jupyter_notebook_config.py"
\n    ],
\n    [
\n      "workdir",
\n      "/home/neuro"
\n    ]
\n  ]
\n}' > /neurodocker/neurodocker_specs.json

%environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export ND_ENTRYPOINT="/neurodocker/startup.sh"
export FORCE_SPMMCR="1"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2018b/v95/runtime/glnxa64:/opt/matlabmcr-2018b/v95/bin/glnxa64:/opt/matlabmcr-2018b/v95/sys/os/glnxa64:/opt/matlabmcr-2018b/v95/extern/bin/glnxa64"
export MATLABCMD="/opt/matlabmcr-2018b/v95/toolbox/matlab"
export PATH="/opt/dcm2niix-latest/bin:$PATH"
export PATH="/opt/petpvc-1.2.2/bin:$PATH"
export CONDA_DIR="/opt/miniconda-latest"
export PATH="/opt/miniconda-latest/bin:$PATH"

%runscript
/neurodocker/startup.sh "$@"
